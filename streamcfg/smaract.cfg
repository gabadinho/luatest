#
# Commands to communicate with SmarAct MCS motor controller
#




OutTerminator = LF;
InTerminator =  LF;
#ReplyTimeout  = 300;
ReplyTimeout  = 500;
#ReadTimeout   = 100;
ReadTimeout   = 120;
WriteTimeout  = 100;
PollPeriod    = 10;

#        BASE COMMANDS - for the Controller

get_id            {out ":GSI"  ;in ":ID%#s"}				#get the identification as a string

softreset         {out ":R"    ;in "%#s" }				#soft reset -
set_sync          {out ":SCM0" ;in "%(\$1:REPLY)s" }			#all commands assume sychronous mode

set_hand          {out ":SHE%d";in "%(\$1:REPLY)s" }			#Hand controller mode 0:disabled;  1:enabled;  2:disabled but readback works

num_chans  	  {out ":GNC"  ;in ":N%f"}				#get number of channels
firmware          {out ":GIV"  ;in ":IV%#s"}				#get the firmware version
commmode          {out ":GCM"  ;in ":CM%f"}				#get the communication mode: 0=synchronous 1=asyn

abortmotion       {out ":S"}						#stop immediately - no deceleration phase


sendstring        {out ":%s";  in "%(DESC)#s"}				#user defined question/response

get_smode	  {wait 500;out ":GSE";   in ":SE%d"}			#Sensor enable mode:0=off, 1=enabled 2=power save.
set_smode	  {out ":SSE%d"; in "%(\$1:REPLY)s"}			#Sensor enable mode:0=off, 1=enabled 2=power save.

set_br115200	  {out ":CB115200"; in "%(\$1:REPLY)s"}			#Set Baudrate to 115200 - takes effect after power off or reset.
set_br57600	  {out ":CB57600" ; in "%(\$1:REPLY)s"}			#Set Baudrate to 57600  - takes effect after power off or reset.
set_br9600	  {out ":CB9600"  ; in "%(\$1:REPLY)s"}			#Set Baudrate to 9600   - takes effect after power off or reset (Default)


# ---------------- C H A N N E L   n   (n-1 in MCS) -------------- GENERIC - if this works then numbered channels can be removed
#\$1=channel num [0.. ]
#\$2=PV name (normally [1.. ] )

set_accn          {out ":SCLA\$1,%d";in "%(\$2:REPLY)s"}		#\set the closed loop acceleration
get_accn	  {out ":GCLA\$1"   ;in ":CLA\$1,%f"}			#get the closed loop acceleration

set_veln          {out ":SCLS\$1,%d";in "%(\$2:REPLY)s"}		#\set the closed loop velocity
get_veln	  {out ":GCLS\$1"   ;in ":CLS\$1,%f"}			#get the closed loop velocity

set_gstn          {out ":SST\$1,%i" ;in "%(\$2:REPLY)s"}		#set sensor type
get_gstn	  {out ":GST\$1"    ;in ":ST\$1,%i"}			#get sensor type: wait is needed to give time for value to be written

set_clmfn         {out ":SCLF\$1,%d";in "%(\$2:REPLY)s"}		#\set the closed loop max frequency 50 to 18500Hz - is there a get command??

set_dirn 	  {out ":SSC\$1,0,%{0|1}";in "%(\$2:REPLY)s"}		#set direction of movement(0-positive; 1-negative)
get_dirn 	  {out ":GSC\$1";in ":SC\$1,%*d,%{0|1}"}			#get direction of movement(0-positive; 1-negative)

set_posn	  {out ":SP\$1,%d"  ;in "%(\$2:REPLY)s"}		#define current positions value
curposn		  {out ":GP\$1"     ;in ":P%(\$2:POS_ERROR)i,%f";    @mismatch {in ":E\$1,%(\$2:POS_ERROR)i";}}			#get current position
curangn		  {out ":GA\$1"     ;in ":A%(\$2:POS_ERROR)i,%f,%(\$2:CURROT)f"; @mismatch {in ":E\$1,%(\$2:POS_ERROR)i";}}	#get current position/angle

stopn		  {out ":S\$1"	  ;in "%(\$2:REPLY)s"}			#\STOP!
calibraten	  {out ":CS\$1"	  ;in "%(\$2:REPLY)s"}			#\Calibrate sensor

#find_ref_backn	  {out ":FRM\$1,1,%(\$2\$3:HOLD)i,1"  ;in "%(\$2:REPLY)s"}	#\drive backwards to find ref, hold position and zero counter (60000=infinite hold, otherwise in ms)
find_ref_backn	  {out ":FRM\$1,1,%(\$2:HOLD)i,1"  ;in "%(\$2:REPLY)s"}	#\drive backwards to find ref, hold position and zero counter (60000=infinite hold, otherwise in ms)

#find_ref_forwn	  {out ":FRM\$1,0,%(\$2\$3:HOLD)i,1"  ;in "%(\$2:REPLY)s"}	#\drive forwards  to find ref, hold position and zero counter
find_ref_forwn	  {out ":FRM\$1,0,%(\$2:HOLD)i,1"  ;in "%(\$2:REPLY)s"}	#\drive forwards  to find ref, hold position and zero counter

statusn		  {out ":GS\$1"     ;in ":S\$1,%d"}				#status: 0:stopped;1:stepping;2:scanning;3:Holding;4:Targeting;5:Move delay;6:Calibrating;7:FRM;8:Locked

#set_posabsn	  {out ":MPA\$1,%d,%(\$2\$3:HOLD)i" ;in "%(\$2:REPLY)s"}	#\position absolute and hold/
set_posabsn	  {out ":MPA\$1,%d,%(\$2:HOLD)i" ;in "%(\$2:REPLY)s"}	#\position absolute and hold/

#set_posreln	  {out ":MPR\$1,%d,%(\$2\$3:HOLD)i" ;in "%(\$2:REPLY)s"}	#position relative rel and hold 
set_posreln	  {out ":MPR\$1,%d,%(\$2:HOLD)i" ;in "%(\$2:REPLY)s"}	#position relative rel and hold 

set_angabsn	  {out ":MAA\$1,%d,%(\$2\$3:SET_ANG_ABSPOS)i,%(\$2\$3:HOLD)i" ;in "%(\$2:REPLY)s"}	#\rotational absolute and hold/
#set_angreln	  {out ":MAR\$1,%d,%(\$2\$3:ROTR)i,%(\$21:HOLD)i" ;in "%(\$2:REPLY)s"}	#rotational relative rel and hold 

#move_stepsn	  {out ":MST\$1,%d,%(\$2\$3:AMPLITUDE)i,%(\$2\$3:CL_MAX_FREQ)i" ;in "%(\$2:REPLY)s"}	#\Step move - open loop for devices with no encoder
move_stepsn	  {out ":MST\$1,%d,%(\$2:AMPLITUDE)i,%(\$2:CL_MAX_FREQ)i" ;in "%(\$2:REPLY)s"}	#\Step move - open loop for devices with no encoder


get_gppkn	  {out ":GPPK\$1"   ;in ":PPK\$1,%d"}			#Has device been homed

